setwd("C:/Users/Madison.Betts/Desktop/eulachonGSI/eulachonGSI/eulachon_troubleshooting/EulachonGSI_M2PRM_M2PM9_GTscore_CAT_sidebyside")
# Install packages
install.packages("readxl")
# Load required libraries
library(readxl)
library(ggplot2)
library(tidyr)
library(dplyr)
#Read in the Excel file
data <- read_excel("GTscore_Summary_comparison.xlsx", sheet = "locus_summary")
to_remove <- read_excel("GTscore_Summary_comparison.xlsx", sheet = "to_remove")
# Optional: check your column names
print(colnames(data))
#Reshape to long format
data_long <- data %>%
pivot_longer(cols = c(primerprobeprop_EH, primerprobeprop_OG),
names_to = "GenotypeType",
values_to = "Proportion") %>%
mutate(Proportion = as.numeric(Proportion))  # <-- Force numeric
# Filter data_long for the loci to be removed
highlight_loci <- data_long %>%
filter(locus %in% to_remove$locus)
highlight_loci <- inner_join(data, to_remove, by = "locus")
highlight_long <- inner_join(highlight_loci, data_long, by = "locus")
#Let's create a histogram overlaying the proportion of primer probe reads captured by each locus for both methods (EH and OG)
histogram_loci <-ggplot(data_long, aes(x = Proportion, fill = GenotypeType)) +
geom_histogram(position = "identity", bins = 30, alpha = 0.6, color = "black") +
geom_rug(data = highlight_long, aes(x = Proportion, color = GenotypeType),
sides = "b", size = 0.7, inherit.aes = FALSE) +
scale_fill_manual(values = c("primerprobeprop_EH" = "red", "primerprobeprop_OG" = "blue"),
labels = c("EH", "OG")) +
scale_color_manual(values = c("primerprobeprop_EH" = "red", "primerprobeprop_OG" = "blue")) +
labs(
title = "Histogram of Target Capture Rates (Proportions) across Loci",
x = "Primer Probe Proportion",
y = "Count (# of loci)",
fill = "Method",
color = "Method"
) +
theme_minimal()#This figure shows us that EH methods performed poorly compared to OG methods
histogram_loci
#Let's create a histogram overlaying the proportion of primer probe reads captured by each locus for both methods (EH and OG)
histogram_loci <- ggplot(data_long, aes(x = Proportion, fill = GenotypeType)) +
geom_histogram(position = "identity", bins = 30, alpha = 0.6, color = "black") +
geom_rug(data = highlight_long, aes(x = Proportion),
sides = "t", size = 1, color = "yellow", inherit.aes = FALSE) +
scale_fill_manual(values = c("primerprobeprop_EH" = "red", "primerprobeprop_OG" = "blue"),
labels = c("EH", "OG")) +
labs(
title = "Histogram of Target Capture Rates (Proportions) across Loci",
x = "Primer Probe Proportion",
y = "Count (# of loci)",
fill = "Method"
) +
theme_minimal()#This figure shows us that EH methods performed poorly compared to OG methods
histogram_loci
#Let's create a histogram overlaying the proportion of primer probe reads captured by each locus for both methods (EH and OG)
histogram_loci <- ggplot(data_long, aes(x = Proportion, fill = GenotypeType)) +
geom_histogram(position = "identity", bins = 30, alpha = 0.6, color = "black") +
# Black base for outline
geom_rug(data = highlight_long, aes(x = Proportion),
sides = "b", size = 1.5, color = "black", inherit.aes = FALSE) +
# Goldenrod overlay for visibility
geom_rug(data = highlight_long, aes(x = Proportion),
sides = "b", size = 0.8, color = "goldenrod", inherit.aes = FALSE) +
scale_fill_manual(values = c("primerprobeprop_EH" = "red", "primerprobeprop_OG" = "blue"),
labels = c("EH", "OG")) +
labs(
title = "Histogram of Target Capture Rates (Proportions) across Loci",
x = "Primer Probe Proportion",
y = "Count (# of loci)",
fill = "Method"
) +
theme_minimal()#This figure shows us that EH methods performed poorly compared to OG methods
histogram_loci
ggsave(filename = "histogram_loci.jpeg", plot = histogram_loci, dpi = 300, width = 8, height = 6, units = "in")
#################################################################################
#Step 2: Let's plot a scatter plot to compare primer probe reads across loci, for both EH and OG methods
data$primerprobeprop_OG <- as.numeric(data$primerprobeprop_OG)
data$primerprobeprop_EH <- as.numeric(data$primerprobeprop_EH)
stopifnot(all(c("primerprobeprop_OG", "primerprobeprop_EH") %in% colnames(highlight_loci)))
scatter_loci <- ggplot(data, aes(x = primerprobeprop_OG, y = primerprobeprop_EH)) +
geom_point(color = "darkgreen", alpha = 0.7) +
# Overlay to_remove loci with different style
geom_point(data = highlight_loci, aes(x = primerprobeprop_OG, y = primerprobeprop_EH),
color = "black", shape = 21, fill = "yellow", size = 3, stroke = 1.2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
scale_x_continuous(
name = "Original GTseq method (OG)",
breaks = seq(0, 1, by = 0.2)
) +
scale_y_continuous(
name = "Emma's GTseq method (EH)",
breaks = seq(0, 1, by = 0.2)
) +
labs(title = "Primer Probe Proportion Across Loci: EH vs OG") +
theme_minimal() #The plot shows most points falling below the slope line, which
#indicates that the OG methods performed better for the majority of loci
ggsave(filename = "scatter_loci.jpeg", plot = scatter_loci, dpi = 300, width = 8, height = 6, units = "in")
#indicates that the OG methods performed better for the majority of loci
scatter_loci
#################################################################################
#Step 2: Let's plot a scatter plot to compare primer probe reads across loci, for both EH and OG methods
data$primerprobeprop_OG <- as.numeric(data$primerprobeprop_OG)
data$primerprobeprop_EH <- as.numeric(data$primerprobeprop_EH)
stopifnot(all(c("primerprobeprop_OG", "primerprobeprop_EH") %in% colnames(highlight_loci)))
scatter_loci <- ggplot(data, aes(x = primerprobeprop_OG, y = primerprobeprop_EH)) +
geom_point(color = "darkgreen", alpha = 0.7) +
# Overlay to_remove loci with different style
geom_point(data = highlight_loci, aes(x = primerprobeprop_OG, y = primerprobeprop_EH),
color = "black", shape = 21, fill = "yellow", size = 3, stroke = 1.2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
scale_x_continuous(
name = "Original GTseq method (OG)",
breaks = seq(0, 1, by = 0.2)
) +
scale_y_continuous(
name = "Emma's GTseq method (EH)",
breaks = seq(0, 1, by = 0.2)
) +
labs(title = "Primer Probe Proportion Across Loci: EH vs OG") +
theme_minimal() #The plot shows most points falling below the slope line, which
#indicates that the OG methods performed better for the majority of loci
scatter_loci
unique(data$primerprobeprop_OG[!grepl("^[0-9.]+$", data$primerprobeprop_OG)])
#################################################################################
#Step 1: Let's create a histogram overlaying the proportion of primer probe reads captured by each locus for both methods (EH and OG)
histogram_loci <- ggplot(data_long, aes(x = Proportion, fill = GenotypeType)) +
geom_histogram(position = "identity", bins = 30, alpha = 0.6, color = "black") +
# Black base for outline
geom_rug(data = highlight_long, aes(x = Proportion),
sides = "b", size = 1.5, color = "black", inherit.aes = FALSE) +
# Goldenrod overlay for visibility
geom_rug(data = highlight_long, aes(x = Proportion),
sides = "b", size = 0.8, color = "goldenrod", inherit.aes = FALSE) +
scale_fill_manual(values = c("primerprobeprop_EH" = "red", "primerprobeprop_OG" = "blue"),
labels = c("EH", "OG")) +
labs(
title = "Histogram of Target Capture Rates (Proportions) across Loci",
x = "Primer Probe Proportion",
y = "Count (# of loci)",
fill = "Method"
) +
theme_minimal()#This figure shows us that EH methods performed poorly compared to OG methods
histogram_loci
#################################################################################
#Step 2: Let's plot a scatter plot to compare primer probe reads across loci, for both EH and OG methods
data$primerprobeprop_OG <- as.numeric(data$primerprobeprop_OG)
data$primerprobeprop_EH <- as.numeric(data$primerprobeprop_EH)
stopifnot(all(c("primerprobeprop_OG", "primerprobeprop_EH") %in% colnames(highlight_loci)))
scatter_loci <- ggplot(data, aes(x = primerprobeprop_OG, y = primerprobeprop_EH)) +
geom_point(color = "darkgreen", alpha = 0.7) +
# Overlay to_remove loci with different style
geom_point(data = highlight_loci, aes(x = primerprobeprop_OG, y = primerprobeprop_EH),
color = "black", shape = 21, fill = "yellow", size = 3, stroke = 1.2) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
scale_x_continuous(
name = "Original GTseq method (OG)",
breaks = seq(0, 1, by = 0.2)
) +
scale_y_continuous(
name = "Emma's GTseq method (EH)",
breaks = seq(0, 1, by = 0.2)
) +
labs(title = "Primer Probe Proportion Across Loci: EH vs OG") +
theme_minimal() #The plot shows most points falling below the slope line, which
#indicates that the OG methods performed better for the majority of loci
scatter_loci
###### Define the columns of interest
num_cols <- c("primerprobeprop_OG", "primerprobeprop_EH")
# Step 1: Ensure numeric conversion of columns in 'data'
data <- data %>%
mutate(across(all_of(num_cols), ~ suppressWarnings(as.numeric(trimws(.)))))
# Step 2: Ensure numeric conversion of columns in 'highlight_loci'
highlight_loci <- highlight_loci %>%
mutate(across(all_of(num_cols), ~ suppressWarnings(as.numeric(trimws(.)))))
# Step 3: Filter out rows in 'data' with NA in any of the numeric columns
plot_df <- data %>%
filter(if_all(all_of(num_cols), ~ !is.na(.)))
# Step 4: Create scatter plot
scatter_loci <- ggplot(plot_df, aes(x = primerprobeprop_OG, y = primerprobeprop_EH)) +
geom_point(color = "darkgreen", alpha = 0.7) +
geom_point(
data = highlight_loci,
aes(x = primerprobeprop_OG, y = primerprobeprop_EH),
color = "black", shape = 21, fill = "yellow", size = 3, stroke = 1.2
) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
scale_x_continuous(
name = "Original GTseq method (OG)",
breaks = seq(0, 1, by = 0.2),
limits = c(0, 1)
) +
scale_y_continuous(
name = "Emma's GTseq method (EH)",
breaks = seq(0, 1, by = 0.2),
limits = c(0, 1)
) +
labs(title = "Primer Probe Proportion Across Loci: EH vs OG") +
theme_minimal()
# Step 5: Print the plot
scatter_loci
ggsave(filename = "scatter_loci.jpeg", plot = histogram_loci, dpi = 300, width = 8, height = 6, units = "in")
# Create scatter plot
scatter_loci <- ggplot(plot_df, aes(x = primerprobeprop_OG, y = primerprobeprop_EH)) +
geom_point(color = "darkgreen", alpha = 0.7) +
geom_point(
data = highlight_loci,
aes(x = primerprobeprop_OG, y = primerprobeprop_EH),
color = "black", shape = 21, fill = "yellow", size = 3, stroke = 1.2
) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
scale_x_continuous(
name = "Original GTseq method (OG)",
breaks = seq(0, 1, by = 0.2),
limits = c(0, 1)
) +
scale_y_continuous(
name = "Emma's GTseq method (EH)",
breaks = seq(0, 1, by = 0.2),
limits = c(0, 1)
) +
labs(title = "Primer Probe Proportion Across Loci: EH vs OG") +
theme_minimal()
# Print and save the plot
scatter_loci
ggsave(filename = "scatter_loci.jpeg", plot = histogram_loci, dpi = 300, width = 8, height = 6, units = "in")
ggsave(filename = "scatter_loci.jpeg", plot = scatter_loci, dpi = 300, width = 8, height = 6, units = "in")
indiv_genotype <- read_excel("concatenate_check.xlsx", sheet = "comparison")
# Step 2: Convert relevant columns to numeric (just in case)
numeric_indiv_genotype <- indiv_genotype %>%
mutate(
genotypingrate_OG = as.numeric(genotypingrate_OG),
genotypingrate_EH = as.numeric(genotypingrate_EH)
)
# Step 3: Reshape data to long format for ggplot
data_long_numeric_indiv_genotype <- indiv_genotype %>%
pivot_longer(
cols = c(genotypingrate_OG, genotypingrate_EH),
names_to = "Method",
values_to = "GenotypingRate"
) %>%
mutate(Method = recode(Method,
genotypingrate_OG = "OG",
genotypingrate_EH = "EH"))
# Step 4: Plot histogram
indiv_genotype_plot <- ggplot(data_long_numeric_indiv_genotype, aes(x = GenotypingRate, fill = Method)) +
geom_histogram(position = "identity", bins = 30, alpha = 0.6, color = "black") +
scale_fill_manual(values = c("OG" = "blue", "EH" = "red")) +
labs(
title = "Genotyping Rate by Method Across Individuals",
x = "Genotyping Rate",
y = "Count of Individuals",
fill = "Method"
) +
theme_minimal()
# Step 5: Display the plot
hist_plot
# Step 5: Display the plot
indiv_genotype_plot
# Step 3: Reshape data to long format for ggplot
data_long_numeric_indiv_genotype <- numeric_indiv_genotype %>%
pivot_longer(
cols = c(genotypingrate_OG, genotypingrate_EH),
names_to = "Method",
values_to = "GenotypingRate"
) %>%
mutate(Method = recode(Method,
genotypingrate_OG = "OG",
genotypingrate_EH = "EH"))
# Step 4: Plot histogram
indiv_genotype_plot <- ggplot(data_long_numeric_indiv_genotype, aes(x = GenotypingRate, fill = Method)) +
geom_histogram(position = "identity", bins = 30, alpha = 0.6, color = "black") +
scale_fill_manual(values = c("OG" = "blue", "EH" = "red")) +
labs(
title = "Genotyping Rate by Method Across Individuals",
x = "Genotyping Rate",
y = "Count of Individuals",
fill = "Method"
) +
theme_minimal()
# Step 5: Display the plot
indiv_genotype_plot
# Step 2: Convert relevant columns to numeric
numeric_indiv_genotype <- indiv_genotype %>%
mutate(
genotypingrate_OG = as.numeric(genotypingrate_OG),
genotypingrate_EH = as.numeric(genotypingrate_EH)
)
# Step 3: Reshape data to long format for bar plot
data_long_numeric_indiv_genotype <- numeric_indiv_genotype %>%
pivot_longer(
cols = c(genotypingrate_OG, genotypingrate_EH),
names_to = "Method",
values_to = "GenotypingRate"
) %>%
mutate(Method = recode(Method,
genotypingrate_OG = "OG",
genotypingrate_EH = "EH"))
# Step 4: Bar plot with each individual on the x-axis
indiv_genotype_plot <- ggplot(data_long_numeric_indiv_genotype,
aes(x = lab_sampleID, y = GenotypingRate, fill = Method)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
scale_fill_manual(values = c("OG" = "blue", "EH" = "red")) +
labs(
title = "Genotyping Rate per Individual by Method",
x = "Individual (lab_sampleID)",
y = "Genotyping Rate",
fill = "Method"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)  # Rotate x-axis labels
)
# Step 5: Display the plot
indiv_genotype_plot
# Step 2: Convert relevant columns to numeric
numeric_indiv_genotype <- indiv_genotype %>%
mutate(
genotypingrate_OG = as.numeric(genotypingrate_OG),
genotypingrate_EH = as.numeric(genotypingrate_EH)
)
# Step 3: Reshape data to long format for bar plot
data_long_numeric_indiv_genotype <- numeric_indiv_genotype %>%
pivot_longer(
cols = c(genotypingrate_OG, genotypingrate_EH),
names_to = "Method",
values_to = "GenotypingRate"
) %>%
mutate(Method = recode(Method,
genotypingrate_OG = "OG",
genotypingrate_EH = "EH"))
# Step 4: Calculate mean genotyping rate for each method
mean_rates <- data_long_numeric_indiv_genotype %>%
group_by(Method) %>%
summarise(mean_rate = mean(GenotypingRate, na.rm = TRUE))
# Step 5: Create bar plot with horizontal dashed lines for means
indiv_genotype_plot <- ggplot(data_long_numeric_indiv_genotype,
aes(x = lab_sampleID, y = GenotypingRate, fill = Method)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
geom_hline(data = mean_rates,
aes(yintercept = mean_rate, color = Method),
linetype = "dashed", linewidth = 1) +
scale_fill_manual(values = c("OG" = "blue", "EH" = "red")) +
scale_color_manual(values = c("OG" = "blue", "EH" = "red"), guide = "none") +
labs(
title = "Genotyping Rate per Individual by Method",
x = "Individual (lab_sampleID)",
y = "Genotyping Rate",
fill = "Method"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
)
# Step 6: Display the plot
indiv_genotype_plot
# Save the plot as a high-resolution JPEG
ggsave(
filename = "genotyping_rate_per_individual.jpg",
plot = indiv_genotype_plot,
width = 12,         # Width in inches (adjust if needed)
height = 6,         # Height in inches (adjust if needed)
dpi = 300,
units = "in",
device = "jpeg"
)
setwd("C:/Users/Madison.Betts/Desktop/github/embryo_distribution_BHC/Embryo-Distribution-within-Bluehead-Chub-Nests")
setwd("C:/Users/Madison.Betts/Desktop/github/embryo_distribution_BHC/Embryo-Distribution-within-Bluehead-Chub-Nests")
#install and load all necessary packages
install.packages("readxl")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("AICcmodavg")
#install.packages("Rtools")
install.packages("lme4")
library(readxl)
library(ggplot2)
library(dplyr)
library(AICcmodavg)
#library(Rtools)
library(lme4)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("readxl")
install.packages("readxl")
install.packages("ggplot2")
#read in excel sheets
dividednests <- read_excel("embryo_distribution.xlsx", sheet = "prop_eggsgrav")
View(dividednests)
genetics <- read_excel("embryo_distribution.xlsx", sheet = "genetics_analysis", na = "#N/A")
View(genetics)
#clean sheets that have NAs that interfere with analysis
summary(genetics)
genetics_cleaned <- na.omit(genetics)
View(genetics_cleaned)
options(prompt = "=")
#assign compartments as factors
dividednests$compartment <- factor(dividednests$compartment, levels=c("TD", "MD", "BD", "TU", "MU", "BU"), labels=c('1', '2', '3', '4', '5', '6'))
#let's visualize how embryo density varies across compartments
embryodensity <- ggplot(dividednests, aes(x = compartment, y = propembryoct)) +
geom_boxplot(fill = "grey", notch = FALSE, position = position_dodge(preserve = "single")) +
scale_x_discrete(labels = c("TD", "MD", "BD", "TU", "MU", "BU")) +  # Set x-axis labels here
labs(
x = "Nest Section",
y = "Volume of Eggs (%)",
title = ""
) +
theme_bw() +
theme(
text = element_text(size = 15),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15),
plot.title = element_text(size = 15, hjust = 0.5)
)
embryodensity
plot(dividednests$propnestvol, dividednests$propembryoct, main=" ",
xlab="Nest Section Volume (%)", ylab="Egg Volume (%)", pch=2, cex=1.5, cex.lab=1.5)
abline(lm(dividednests$propembryoct~dividednests$propnestvol), col="red") # regression line (y~x)
lines(lowess(dividednests$propembryoct,dividednests$propnestvol), col="blue") # lowess line (x,y)
#let's compare sampled nest volume vs targeted volume
compare_gravvol <- ggplot(dividednests, aes(x = compartment, y = propnestvol)) +
geom_boxplot(fill = "grey", notch = FALSE) +
geom_hline(yintercept = 16.6, color = "blue", linewidth = 1.2, linetype = "dotted") +
scale_x_discrete(labels = c("TD", "MD", "BD", "TU", "MU", "BU")) +
labs(
title = "Actual nest volumes sampled vs targeted 16.6% per section",
x = "Nest Section",
y = "Volume of Gravel (%)"
) +
theme_bw() +
theme(
text = element_text(size = 15),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15),
plot.title = element_text(size = 15, hjust = 0.5)
)
compare_gravvol
#plot to show how egg density varies across compartments once adjusted for sampled gravel vol
densityadjusted <- ggplot(dividednests, aes(x = compartment, y = adjembryoct)) +
geom_boxplot(fill = "grey", notch = FALSE, position = position_dodge(preserve = "single")) +
scale_x_discrete(labels = c("TD", "MD", "BD", "TU", "MU", "BU")) +  # x-axis labels
labs(
x = "Nest Section",
y = "Adjusted Volume of Embryos (%)",
title = ""
) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = 15),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15),
plot.title = element_text(size = 15, hjust = 0.5)
)
densityadjusted
#print summary statistics of adjusted embyro counts by compartment
dividednests$compartment <- factor(dividednests$compartment,
levels = c("1", "2", "3", "4", "5", "6"),
labels = c("TD", "MD", "BD", "TU", "MU", "BU"))
summary_stats <- dividednests %>%
group_by(compartment) %>%
summarise(
n = sum(!is.na(adjembryoct)),             # count non-missing values
mean = mean(adjembryoct, na.rm = TRUE),
sd = sd(adjembryoct, na.rm = TRUE),
se = sd / sqrt(n),                        # standard error
median = median(adjembryoct, na.rm = TRUE)
)
print(summary_stats)
#let's investigate how embryos are distributed across nest sections, using AICcmodavg R package and adjusted embryo counts, with nest as a random effect
a0 = glmer(cbind(sectionembryos, totnesteggs-sectionembryos) ~ (1|nest), family=binomial(link = "logit"), data=dividednests) #null model
#let's investigate how embryos are distributed across nest sections, using AICcmodavg R package and adjusted embryo counts, with nest as a random effect
a0 = glmer(cbind(sectionembryos, totnestembryos-sectionembryos) ~ (1|nest), family=binomial(link = "logit"), data=dividednests) #null model
a1 = glmer(cbind(sectionembryos, totnestembryos-sectionembryos) ~ (1|nest)+bottom+top, family=binomial(link = 'logit'), data=dividednests) #vertical gradient
a2 = glmer(cbind(sectionembryos, totnestembryos-sectionembryos) ~ (1|nest)+upstream, family=binomial(link = 'logit'), data=dividednests) #horizontal gradient
a3 = glmer(cbind(sectionembryos, totnestembryos-sectionembryos) ~ (1|nest)+MU+MD+BD+BU+TU, family=binomial(link = 'logit'), data=dividednests) #vertical and horizontal gradient
summary(a3)
cmods=list(a0,a1,a2,a3)
Modnames=c("Null Model","Vertical Gradient Model","Horizontal Gradient Model","Vertical and Horizontal Gradient Model")
print(aictab(cand.set = cmods, modnames = Modnames, second.ord = TRUE), digits = 2)
